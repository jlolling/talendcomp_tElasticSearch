<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.utils.NodeUtil
		java.util.List
		java.util.ArrayList
		java.util.Map
	" 
%>
<% 
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode) codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	List<IMetadataColumn> listIncomingColumns = new ArrayList<IMetadataColumn>();
	IConnection inconn = null;
	List<? extends IConnection> inConns = NodeUtil.getIncomingConnections(node, IConnectionCategory.DATA);
	if (inConns.size() > 0) {
		inconn = inConns.get(0);
		IMetadataTable metadata = node.getMetadataFromConnector(inconn.getConnectorName());
		listIncomingColumns = metadata.getListColumns();
	}
	List<IMetadataColumn> listOutgoingColumns = new ArrayList<IMetadataColumn>(); // dummy
	List<? extends IConnection> outConns = NodeUtil.getOutgoingConnections(node, IConnectionCategory.DATA);
	IConnection outconn = null;
	if (outConns.size() > 0) {
		outconn = outConns.get(0);
		IMetadataTable metadata = node.getMetadataFromConnector(outconn.getConnectorName());
		listOutgoingColumns = metadata.getListColumns();
	}
	String setup = ElementParameterParser.getValue(node, "__SETUP__");
	String inputContent = ElementParameterParser.getValue(node, "__REQUEST_PAYLOAD_CONTENT__");
	if (inputContent == null) {
		inputContent = "null";
	}
	String inputColumnName = null;
	if (inconn != null) {
		inputColumnName = ElementParameterParser.getValue(node, "__REQUEST_PAYLOAD_INPUT_COLUMN__");
	}
   String path = ElementParameterParser.getValue(node, "__PATH__");
   String method = ElementParameterParser.getValue(node, "__METHOD__");
   List<Map<String, String>> queryParams = (List<Map<String,String>>) ElementParameterParser.getObjectValue(node, "__QUERY__");
	boolean log4jEnabled = "true".equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__")); %>
	try {
		<%=cid%>.setMethod("<%=method%>");
		<%=cid%>.setPath(<%=path%>);
<%	for (Map<String, String> row : queryParams) {
		String pname = row.get("NAME");
		String pvalue = row.get("VALUE");
		if (pname != null && pname.trim().isEmpty() == false && pvalue != null && pvalue.trim().isEmpty() == false) { %>
		<%=cid%>.setQueryParameter(<%=pname%>, <%=pvalue%>);
<%		} %>
<%	} %>
   // <%=setup%>
<%	if ("READ_FROM_INPUT".equals(setup) && inputContent != null && inputContent.trim().isEmpty() == false) { %>
		<%=cid%>.setPayload(<%=inputContent%>);
<%	} else if ("READ_FROM_FLOW".equals(setup) && inconn != null && inputColumnName != null) { %>
		<%=cid%>.setPayload(<%=inconn.getName()%>.<%=inputColumnName%>);
<% } %>
		String <%=cid%>_response = <%=cid%>.performRequest();
		int <%=cid%>_statusCode = <%=cid%>.getHttpStatusCode();
		globalMap.put("<%=cid%>_RESPONSE", <%=cid%>_response);
		globalMap.put("<%=cid%>_STATUS_CODE", <%=cid%>_statusCode);
<% if (outconn != null) { %>
		<%=outconn.getName()%>.body = <%=cid%>_response;
		<%=outconn.getName()%>.statusCode = <%=cid%>_statusCode;
<%	} %>
<%	if (inconn != null && outconn != null) {
		for (IMetadataColumn incol : listIncomingColumns) {
			for (IMetadataColumn outcol : listOutgoingColumns) {
				if ("body".equals(incol.getLabel()) == false &&
					"statusCode".equals(incol.getLabel()) == false && 
					incol.getLabel().equals(outcol.getLabel())) { %>
		<%=outconn.getName()%>.<%=outcol.getLabel()%> = <%=inconn.getName()%>.<%=incol.getLabel()%>;
<%       	}
				break;
			}
		}
	} %>
		nb_line_<%=cid%>++;
	} catch (Exception <%=cid%>_upex) {
		String message = "Request failed: " + <%=cid%>_upex.getMessage();
		globalMap.put("<%=cid%>_ERROR_MESSAGE", message);
<%	if (log4jEnabled) { %>
		log.error(message, <%=cid%>_upex);
<%	} %>
		throw <%=cid%>_upex;
	}	